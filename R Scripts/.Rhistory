geom_histogram(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = df'MeanRecognitionT', na.rm = TRUE)) +
geom_histogram(color = "black", fill = "white", stat = "count", binwidth = 1)
ggplot(df, aes(x = df'MeanRecognitionT', na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = df$'MeanRecognitionT', na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = df$'MeanRecognitionUT', na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count")
library (readr)   #reading CSV's
library (kableExtra)   #formatting table
library (pastecs) #describes data
library (dplyr)   #manipulating data to view it
library (ggplot2) #visualizing data with graphs (we don't talk about the first "ggplot")
#Statistical learning vs. random stimuli:
#This chunk differentiated between the random (0) and SL (1) stimuli by creating a new column.
df <- df %>%
mutate(Paradigm = recode(condition, c("active - RS-1" = 0, "passive - RS-2" = 0,
"passive - RS-3" = 0, "active - SLS-1" = 1, "active - SLS-2" = 1,
"active - SLS-3" = 1, "passive - SLS-2" = 1)))
?recode
#Statistical learning vs. random stimuli:
#This chunk differentiated between the random (0) and SL (1) stimuli by creating a new column.
df <- df %>%
mutate(Paradigm = recode(condition, "active - RS-1" = 0, "passive - RS-2" = 0,
"passive - RS-3" = 0, "active - SLS-1" = 1, "active - SLS-2" = 1,
"active - SLS-3" = 1, "passive - SLS-2" = 1))
#Active vs. passive stimuli:
#This chunk differentiated between the passive (0) and active (1) stimuli by creating a new column.
df <- df %>%
mutate(Condition = recode(df$`condition`, "active - RS-1" = 1, "passive - RS-2" = 0,
"passive - RS-3" = 0, "active - SLS-1" = 1, "active - SLS-2" = 1,
"active - SLS-3" = 1, "passive - SLS-2" = 0))
#This chunk created composite scores for random vs. SL Likert scores by first grouping the data by
#Paradigm (0=random, 1=SL), then finding the mean of all MeanRecognitionT scores, then all
#MeanRecognitionUT scores, still separated by random vs. SL. The output is a 4x4 tibble.
#The lowercase "p" in the variable names distinguishes between the means for Paradigm vs. Condition.
df %>%
group_by(Paradigm) %>%
summarise("MeanTp" = mean(MeanRecognitionT), "MeanUTp" = mean(MeanRecognitionUT))
df %>%
group_by(Condition) %>%
summarise("MeanTc" = mean(MeanRecognitionT), "MeanUTc" = mean(MeanRecognitionUT))
df <- df %>%
rowwise() %>%
mutate (MeanRecognitionT = mean(c(`T-1_Likert_1`, df$`T-2_Likert_1`, df$`T-3_Likert_1`, df$`T-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate (MeanRecognitionUT = mean(c(`UT-1_Likert_1`, df$`UT-2_Likert_1`, df$`UT-3_Likert_1`, df$`UT-4_Likert_1`)))
df <- df %>%
mutate(MeanRecognitionT = mean(c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate (MeanRecognitionT = mean(c(`T-1_Likert_1`, df$`T-2_Likert_1`, df$`T-3_Likert_1`, df$`T-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate (MeanRecognitionUT = mean(c(`UT-1_Likert_1`, df$`UT-2_Likert_1`, df$`UT-3_Likert_1`, df$`UT-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate (MeanRecognitionT = mean(c(df$`T-1_Likert_1`, df$`T-2_Likert_1`, df$`T-3_Likert_1`, df$`T-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate (MeanRecognitionUT = mean(c(df$`UT-1_Likert_1`, df$`UT-2_Likert_1`, df$`UT-3_Likert_1`, df$`UT-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate(MeanRecognitionT = mean(c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate(MeanRecognitionUT = mean(c(`UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`)))
#This chunk created composite scores for random vs. SL Likert scores by first grouping the data by
#Paradigm (0=random, 1=SL), then finding the mean of all MeanRecognitionT scores, then all
#MeanRecognitionUT scores, still separated by random vs. SL. The output is a 4x4 tibble.
#The lowercase "p" in the variable names distinguishes between the means for Paradigm vs. Condition.
df %>%
group_by(Paradigm) %>%
summarise("MeanTp" = mean(MeanRecognitionT), "MeanUTp" = mean(MeanRecognitionUT))
#This chunk created composite scores for active vs. passive Likert scores by first grouping the
#data by Condition (0=passive, 1=active), then finding the mean of all MeanRecognitionT scores,
#then all MeanRecognitionUT scores, still separated by active vs. passive. The output is a 4x4 tibble.
#The lowercase "c" in the variable names distinguishes between the means for Paradigm vs. Condition.
df %>%
group_by(Condition) %>%
summarise("MeanTc" = mean(MeanRecognitionT), "MeanUTc" = mean(MeanRecognitionUT))
ggplot(df, aes(x = MeanTp, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
#Were some people more confident than others? To find out, I've created a new column (MeanRecognition)
#that averages MeanRecognitionT and MeanRecognitionUT to get an overall score per subject.
df <- df %>%
rowwise() %>%
mutate(MeanRecognition = mean(c(`MeanRecognitionT`, `MeanRecognitionUT`)))
#To visualize the distribution of confidence, I'll plot MeanRecognition on a histogram.
ggplot(df, aes(x = df$MeanRecognition, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
#To visualize the distribution of confidence, I'll plot MeanRecognition on a histogram.
ggplot(df, aes(x = `MeanRecognition`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
?geom_bar
?ggplot
#To visualize the distribution of confidence, I'll plot MeanRecognition on a histogram.
ggplot(df, aes(x = `MeanRecognition`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count", size = 3)
#To visualize the distribution of confidence, I'll plot MeanRecognition on a histogram.
ggplot(df, aes(x = `MeanRecognition`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count", width = 1)
#To visualize the distribution of confidence, I'll plot MeanRecognition on a histogram.
ggplot(df, aes(x = `MeanRecognition`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count", bin = 1)
?dotplot
?dotchart
dotchart(df, labels = `ResponseID`, groups = `T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`, `UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`)
dotchart(df, labels = `ResponseID`, groups = `T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`, `UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`, cex = 0.5)
dotchart(df(ResonseID), labels = `T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`, `UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`, cex = 0.5)
dotchart(df$ResonseID, labels = `T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`, `UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`, cex = 0.5)
dotchart(df, labels = c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`, `UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`, cex = 0.5), groups = ResonseID)
str(df)
#EM: if you want to take the likert scales and make these numeric (so you can get an average, for example)
#you can select specific columns and make only these numeric
num.columns <- c('T-1_Likert_1', 'T-2_Likert_1', 'T-3_Likert_1', 'T-4_Likert_1', 'UT-1_Likert_1', 'UT-2_Likert_1', 'UT-3_Likert_1', 'UT-4_Likert_1')
num.columns <- c('T-1_Recognition', 'T-2_Recognition', 'T-3_Recognition', 'T-4_Recognition', 'UT-1_Recognition', 'UT-2_Recognition', 'UT-3_Recognition', 'UT-4_Recognition')
num.columns <- c('T-1c_Likert_1', 'T-2c_Likert_1', 'T-3c_Likert_1', 'T-4c_Likert_1', 'Correct_Mvt_T-1', 'Correct_Mvt_T-2', 'Correct_Mvt_T-3', 'Correct_Mvt_T-4')
str(df)
df[num.columns] <- sapply(df[num.columns], as.numeric)
str(df)
df <- df %>% mutate_if(is.character,as.factor)
#EM: if you want to take the likert scales and make these numeric (so you can get an average, for example)
#you can select specific columns and make only these numeric
num.columns <- c('T-1_Likert_1', 'T-2_Likert_1', 'T-3_Likert_1', 'T-4_Likert_1', 'UT-1_Likert_1', 'UT-2_Likert_1', 'UT-3_Likert_1', 'UT-4_Likert_1')
num.columns <- c('T-1_Recognition', 'T-2_Recognition', 'T-3_Recognition', 'T-4_Recognition', 'UT-1_Recognition', 'UT-2_Recognition', 'UT-3_Recognition', 'UT-4_Recognition')
num.columns <- c('T-1c_Likert_1', 'T-2c_Likert_1', 'T-3c_Likert_1', 'T-4c_Likert_1', 'Correct_Mvt_T-1', 'Correct_Mvt_T-2', 'Correct_Mvt_T-3', 'Correct_Mvt_T-4')
df[num.columns] <- sapply(df[num.columns], as.numeric)
#always double check it looks good:
str(df)
dotchart(df, labels = c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`, `UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`, cex = 0.5), groups = ResonseID)
df$`T-1_Recognition` <- as.numeric(df$`T-1_Recognition`)
#always double check it looks good:
str(df)
df$`T-2_Recognition` <- as.numeric(df$`T-2_Recognition`)
df$`T-3_Recognition` <- as.numeric(df$`T-3_Recognition`)
df$`T-4_Recognition` <- as.numeric(df$`T-4_Recognition`)
df$`UT-4_Recognition` <- as.numeric(df$`UT-4_Recognition`)
df$`UT-3_Recognition` <- as.numeric(df$`UT-3_Recognition`)
df$`UT-2_Recognition` <- as.numeric(df$`UT-2_Recognition`)
df$`UT-1_Recognition` <- as.numeric(df$`UT-1_Recognition`)
#always double check it looks good:
str(df)
df <- df %>%
rowwise() %>%
mutate(MeanLikertT = mean(c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate(MeanLikertUT = mean(c(`UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`)))
#This chunk created composite scores for random vs. SL Likert scores by first grouping the data by
#Paradigm (0=random, 1=SL), then finding the mean of all MeanLikertT scores, then all
#MeanLikertUT scores, still separated by random vs. SL. The output is a 4x4 tibble.
#The lowercase "p" in the variable names distinguishes between the means for Paradigm vs. Condition.
df %>%
group_by(Paradigm) %>%
summarise("MeanTp" = mean(MeanLikertT), "MeanUTp" = mean(MeanLikertUT))
#This chunk created composite scores for active vs. passive Likert scores by first grouping the
#data by Condition (0=passive, 1=active), then finding the mean of all MeanLikertT scores,
#then all MeanLikertUT scores, still separated by active vs. passive. The output is a 4x4 tibble.
#The lowercase "c" in the variable names distinguishes between the means for Paradigm vs. Condition.
df %>%
group_by(Condition) %>%
summarise("MeanTc" = mean(MeanLikertT), "MeanUTc" = mean(MeanLikertUT))
#Do some people always pick the same answer? The analysis above mostly answers that question, I just
#have to calculate means for not only Likerts, but Recognition questions, too.
df <- df %>%
rowwise() %>%
mutate(MeanRecognitionT = mean(c('T-1_Recognition', 'T-2_Recognition', 'T-3_Recognition', 'T-4_Recognition')))
warnings()
str(df)
#Do some people always pick the same answer? The analysis above mostly answers that question, I just
#have to calculate means for not only Likerts, but Recognition questions, too.
df <- df %>%
rowwise() %>%
mutate(MeanRecognitionT = mean(c(`T-1_Recognition`, `T-2_Recognition`, `T-3_Recognition`, `T-4_Recognition`)))
df <- df %>%
rowwise() %>%
mutate(MeanRecognitionUT = mean(c(`UT-1_Recognition`, `UT-2_Recognition`, `UT-3_Recognition`, `UT-4_Recognition`)))
ggplot(df, aes(x = MeanRecognitionT, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = MeanRecognitionUT, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = MeanLikertT, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = MeanLikertUT, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
?subtract
if(`T-1_Recognition` = 1){
x = 1
}
if(`T-1_Recognition` = 1){x = 1}
if(`T-1_Recognition` = '1'){x = 1}
if(`T-1_Recognition` == 1){x = 1}
if('T-1_Recognition' == 1){x = 1}
if('T-1_Recognition' == 2){x = 0}
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = x)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` == x)
if('T-1_Recognition' = 1){x = 1}
if('T-1_Recognition' = 2){x = 0}
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` == x)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = x)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = (c(1, 0)[`T-1_Recognition` %in% c(1)]))
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = ifelse(`T-1_Recognition` %in% c(1)) == 1)
rlang::last_error()
?ifelse
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = ifelse(`T-1_Recognition` %in% c(1)) == yes)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = ifelse(`T-1_Recognition` %in% c(1)) = 1)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = if(`T-1_Recognition` %in% c(1)) = 1)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = if(`T-1_Recognition` %in% c(1)) == 1)
mutate(`T-1_Correct` = c(`T-1_Recognition` = 1)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = c(`T-1_Recognition` = 1))
#Were some people more confident than others? To find out, I've created a new column (MeanRecognition)
#that averages MeanLikertT and MeanLikertUT to get an overall score per subject.
df <- df %>%
rowwise() %>%
mutate(MeanLikert = mean(c(`MeanLikertT`, `MeanLikertUT`)))
library (readr)   #reading CSV's
library (kableExtra)   #formatting table
library (pastecs) #describes data
library (dplyr)   #manipulating data to view it
library (ggplot2) #visualizing data with graphs (we don't talk about the first "ggplot")
#Were some people more confident than others? To find out, I've created a new column (MeanLikert)
#that averages MeanLikertT and MeanLikertUT to get an overall score per subject.
df <- df %>%
rowwise() %>%
mutate(MeanLikert = mean(c(`MeanLikertT`, `MeanLikertUT`)))
#To visualize the distribution of confidence, I'll plot MeanRecognition on a histogram.
ggplot(df, aes(x = `MeanLikert`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
df <- df %>%
rowwise() %>%
mutate(MeanRecognition = mean(c(`MeanRecognitioT`, `MeanRecognitionUT`)))
df <- df %>%
rowwise() %>%
mutate(MeanRecognition = mean(c(`MeanRecognitionT`, `MeanRecognitionUT`)))
#To visualize the distribution of recognition, I'll plot MeanRecognitionT and MeanRecognitionUT.
ggplot(df, aes(x = `MeanRecognitionT`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = `MeanRecognitionUT`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
myfile <- "~Users/micaelacarroll/Documents/Most/-SLA_Study/GitHub/ActionLearning/Data/SLA Official Data/Concatenated Data/SLA Data All.csv"
#You can also import the file directly from your computer. To do this, you just put your path
#directory instead of a URL.
df <- read_csv(myfile)
library (readr)   #reading CSV's
library (kableExtra)   #formatting table
library (pastecs) #describes data
library (dplyr)   #manipulating data to view it
library (ggplot2) #
#You can also import the file directly from your computer. To do this, you just put your path
#directory instead of a URL.
df <- read_csv(myfile)
myfile <- "~/Documents/Most/-SLA_Study/GitHub/ActionLearning/Data/SLA Official Data/Concatenated Data/SLA Data All.csv"
#You can also import the file directly from your computer. To do this, you just put your path
#directory instead of a URL.
df <- read_csv(myfile)
myfile <- "~/Documents/Most/-SLA_Study/GitHub/ActionLearning/Data/SLA Official Data/Concatenated Data/SLA Data All.csv"
#You can also import the file directly from your computer. To do this, you just put your path
#directory instead of a URL.
df <- read_csv(myfile)
df<-df[!(df$Finished=="0"),]
str(df)
df$Finished <- as.factor(df$Finished)
df$`Statistical Organization` <- as.factor(df$`Statistical Organization`)
df$Condition <- as.factor(df$Condition)
df$Survey <- as.factor(df$Survey)
str(df)
df <- df %>% mutate_if(is.character,as.factor)
num.columns <- c('T-1_Likert', 'T-2_Likert', 'T-3_Likert', 'T-4_Likert', 'UT-1_Likert', 'UT-2_Likert', 'UT-3_Likert', 'UT-4_Likert')
num.columns <- c('T-1_Recognition', 'T-2_Recognition', 'T-3_Recognition', 'T-4_Recognition', 'UT-1_Recognition', 'UT-2_Recognition', 'UT-3_Recognition', 'UT-4_Recognition')
num.columns <- c('T-1c_Likert', 'T-2c_Likert', 'T-3c_Likert', 'T-4c_Likert', 'Correct_Mvt_T-1', 'Correct_Mvt_T-2', 'Correct_Mvt_T-3', 'Correct_Mvt_T-4')
df[num.columns] <- sapply(df[num.columns], as.numeric)
#always double check it looks good:
str(df)
bar_production <- ggplot(df, aes(condition, Correct_Mvt_Scores, fill = Statistical Organization))
library(ggplot2)
barProduction <- ggplot(df, aes(condition, Correct_Mvt_Scores, fill = df$`Statistical Organization`))
+ labs(x = "Action Conditions", y = "Production Score")
barProduction + stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black")
barProduction + stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "errorbar", colour = "Red") + labs(x = "Action Conditions", y = "Production Score")
barProduction <- ggplot(df, aes(Condition, Correct_Mvt_Scores, fill = df$`Statistical Organization`))
barProduction + stat_summary(fun = mean, geom = "bar", fill = "White", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "errorbar", colour = "Red") + labs(x = "Action Conditions", y = "Production Score")
barProduction + stat_summary(fun = mean, geom = "bar", colour = "Black") + stat_summary(fun.data = mean_cl_normal, geom = "errorbar", colour = "Red") + labs(x = "Action Conditions", y = "Production Score")
barProduction + stat_summary(fun = mean, geom = "bar")# + stat_summary(fun.data = mean_cl_normal, geom = "errorbar", colour = "Red") + labs(x = "Action Conditions", y = "Production Score")
barProduction + stat_summary(fun = mean, geom = "bar")
+ stat_summary(fun.data = mean_cl_normal, geom = "errorbar", colour = "Red")
barProduction + stat_summary(fun = mean, geom = "bar")
+ stat_summary(fun.data = mean_cl_normal, geom = "errorbar", colour = "Red")
+ labs(x = "Action Conditions", y = "Production Score", fill = `Statistical Organization`)
barProduction <- ggplot(df, aes(Condition, Correct_Mvt_Scores, fill = `Statistical Organization`))
barProduction + stat_summary(fun = mean, geom = "bar", position = "dodge") + labs(x = "Action Conditions", y = "Production Score", fill = `Statistical Organization`)
barProduction + stat_summary(fun = mean, geom = "bar", position = "dodge") + labs(x = "Action Conditions", y = "Production Score", fill = df$`Statistical Organization`)
myfile <- "~/Documents/Most/-SLA_Study/GitHub/ActionLearning/Data/SLA Official Data/Concatenated Data/SLA Data All.csv"
#You can also import the file directly from your computer. To do this, you just put your path
#directory instead of a URL.
#Changes to sheet:
#Created "Survey" column to keep track of which survey each data point is from (possible inputs: RS-1, 2, 3; SLS-1, 2, 3).
#Created "Statistical Organization" column (possible inputs: random = 0, statistical = 1).
#Created "Correct_Mvt_Scores" columns. Each box is the sum of each participant's performance scores.
#Changed condition column values to factor (possible inputs: action = 0, stationary = 1, control = 2).
#Deleted all "Date" columns.
#Renamed columns so that they were not specific to any of the six surveys.
df <- read_csv(myfile)
df <- df[-1,] #EM: removes the first row of the data (since this is a Qualtrics file w/ two headers)
df<-df[!(df$Finished=="0"),]
df <- df %>% mutate_if(is.character,as.factor)
num.columns <- c('T-1_Likert', 'T-2_Likert', 'T-3_Likert', 'T-4_Likert', 'UT-1_Likert', 'UT-2_Likert', 'UT-3_Likert', 'UT-4_Likert')
num.columns <- c('T-1_Recognition', 'T-2_Recognition', 'T-3_Recognition', 'T-4_Recognition', 'UT-1_Recognition', 'UT-2_Recognition', 'UT-3_Recognition', 'UT-4_Recognition')
num.columns <- c('T-1c_Likert', 'T-2c_Likert', 'T-3c_Likert', 'T-4c_Likert', 'Correct_Mvt_T-1', 'Correct_Mvt_T-2', 'Correct_Mvt_T-3', 'Correct_Mvt_T-4')
df[num.columns] <- sapply(df[num.columns], as.numeric)
#always double check it looks good:
str(df)
num.columns <- c('Finished', 'Statistical Organization', 'Condition')
#always double check it looks good:
str(df)
factor.columns <- c('Finished', 'Statistical Organization', 'Condition')
#always double check it looks good:
str(df)
df$Finished <- as.factor(df$Finished)
df$`Statistical Organization` <- as.factor(df$`Statistical Organization`)
df$Condition <- as.numeric(df$Condition)
#always double check it looks good:
str(df)
df$Condition <- as.numeric(df$Condition)
#always double check it looks good:
str(df)
is.factor(df$Condition)
df$Condition <- as.factor(df$Condition)
df$Condition <- as.factor(df$Condition)
is.factor(df$Condition)
barProduction <- ggplot(df, aes(Condition, Correct_Mvt_Scores, fill = `Statistical Organization`))
barProduction + stat_summary(fun = mean, geom = "bar", position = "dodge") + labs(x = "Action Conditions", y = "Production Score", fill = df$`Statistical Organization`)
barProduction + stat_summary(fun = mean, geom = "bar", position = "dodge")
+ labs(x = "Action Conditions", y = "Production Score", fill = df$`Statistical Organization`)
+ stat_summary(fun.data = mean_cl_normal, geom = "errorbar", colour = "Red")
barProduction + stat_summary(fun = mean, geom = "bar", position = "dodge") +
labs(x = "Action Conditions", y = "Production Score", fill = df$`Statistical Organization`) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", colour = "Red")
barProduction + stat_summary(fun = mean, geom = "bar", position = "dodge") +
labs(x = "Action Conditions", y = "Production Score", fill = df$`Statistical Organization`) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", colour = "Red", position = "dodge")
barProduction + stat_summary(fun = mean, geom = "bar", position = "dodge") +
labs(x = "Action Conditions", y = "Production Score", fill = df$`Statistical Organization`) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2)
#MC: ANOVA test that tests the interaction between statistical organization and action condition on performance.
model_production <- aov(df$Correct_Mvt_Scores ~ df$`Statistical Organization` * df$Condition)
View(model_production)
summary(model_production)
myfile <- "~/Documents/Most/-SLA_Study/GitHub/ActionLearning/Data/SLA Official Data/Concatenated Data/SLA Data All.csv"
#You can also import the file directly from your computer. To do this, you just put your path
#directory instead of a URL.
#Changes to sheet:
#Created "Survey" column to keep track of which survey each data point is from (possible inputs: RS-1, 2, 3; SLS-1, 2, 3).
#Created "Statistical Organization" column (possible inputs: random = 0, statistical = 1).
#Created "Correct_Mvt_Scores" columns. Each box is the sum of each participant's performance scores.
#Changed condition column values to factor (possible inputs: action = 0, stationary = 1, control = 2).
#Deleted all "Date" columns.
#Renamed columns so that they were not specific to any of the six surveys.
df <- read_csv(myfile)
df <- df[-1,] #EM: removes the first row of the data (since this is a Qualtrics file w/ two headers)
#You can also import the file directly from your computer. To do this, you just put your path
#directory instead of a URL.
#Changes to sheet:
#Created "Survey" column to keep track of which survey each data point is from (possible inputs: RS-1, 2, 3; SLS-1, 2, 3).
#Created "Statistical Organization" column (possible inputs: random = 0, statistical = 1).
#Created "Correct_Mvt_Scores" columns. Each box is the sum of each participant's performance scores.
#Changed condition column values to factor (possible inputs: action = 0, stationary = 1, control = 2).
#Deleted all "Date" columns.
#Renamed columns so that they were not specific to any of the six surveys.
df <- read_csv(myfile)
#If you want to remove them based on unfinished surveys (not NAs), I recommend this instead:
df<-df[!(df$Finished=="0"),]
str(df)
df$Finished <- as.factor(df$Finished)
df$`Statistical Organization` <- as.factor(df$`Statistical Organization`)
df$Condition <- as.factor(df$Condition)
#always double check it looks good:
str(df)
#MC: here's the same bar graph with action conditions (x) and comprehension scores (y)
barComprehension <- ggplot(df, aes(Condition, Correct_Trigram_Scores, fill = `Statistical Organization`))
barComprehension + stat_summary(fun = mean, geom = "bar", position = "dodge") +
labs(x = "Action Conditions", y = "Comprehension Score", fill = df$`Statistical Organization`) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2)
barComprehension + stat_summary(fun = mean, geom = "bar", position = "dodge") +
labs(x = "Action Conditions", y = "Comprehension Score", fill = df$`Statistical Organization`) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
opts(legend(x = SL, y = Random))
barComprehension + stat_summary(fun = mean, geom = "bar", position = "dodge") +
labs(x = "Action Conditions", y = "Comprehension Score", fill = df$`Statistical Organization`) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
legend(x = SL, y = Random)
?legend
barComprehension + stat_summary(fun = mean, geom = "bar", position = "dodge") +
labs(x = "Action Conditions", y = "Comprehension Score", fill = df$`Statistical Organization`) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
legend(NONE)
barComprehension + stat_summary(fun = mean, geom = "bar", position = "dodge") +
labs(x = "Action Conditions", y = "Comprehension Score", fill = df$`Statistical Organization`) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
legend = NONE
#MC: ANOVA test that tests the interaction between statistical organization and action condition on comprehension.
model_comprehension <- aov(df$Correct_Trigram_Scores ~ df$`Statistical Organization` * df$Condition)
model_comprehension
aov(df$Correct_Trigram_Scores ~ df$`Statistical Organization` * df$Condition)
summary(model_comprehension)
summary(model_production)
library (readr)
library (kableExtra)
library (pastecs)
library (dplyr)
library (ggplot2)
myfile <- "~/Documents/Most/-SLA_Study/GitHub/ActionLearning/Data/SLA Official Data/Concatenated Data/Experience All Totals.csv"
df2 <- read_csv(myfile)
str(df2)
df2
View(df2)
ggplot(df2, aes(x = `Experience_Total`, na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count")
#MC: histogram of total experience scores.
ggplot(df2, aes(x = `Experience_Total`, na.rm = TRUE)) +
geom_histogram(color = "black", fill = "white", stat = "count")
?geom_histogram
#MC: histogram of total experience scores.
ggplot(df2, aes(x = `Experience_Total`, na.rm = TRUE)) +
geom_histogram(color = "black", fill = "white", stat = "count", binwidth = 2)
#MC: histogram of total experience scores.
ggplot(df2, aes(x = `Experience_Total`, na.rm = TRUE)) +
geom_histogram(color = "black", fill = "white", stat = "count", binwidth = 5)
#MC: histogram of total experience scores.
ggplot(df2, aes(x = `Experience_Total`, na.rm = TRUE)) +
geom_histogram(color = "black", fill = "white", stat = "bins", binwidth = 5)
#MC: histogram of total experience scores.
ggplot(df2, aes(x = `Experience_Total`, na.rm = TRUE)) +
geom_histogram(color = "black", fill = "white", stat = "bin", binwidth = 5)
model_experience_production <- lm(df$Correct_Mvt_Scores ~ df2$Experience_Total)
df2<-df2[!(df2$Finished=="0"),]
model_experience_production <- lm(df$Correct_Mvt_Scores ~ df2$Experience_Total)
summary(model_experience_production)
model_production <- aov(df$Correct_Mvt_Scores ~ df$`Statistical Organization` + df$Condition)
#MC: ANOVA test that tests the interaction between statistical organization and action condition on performance.
model_production <- aov(df$Correct_Mvt_Scores ~ df$`Statistical Organization` * df$Condition)
model_production2 <- aov(df$Correct_Mvt_Scores ~ df$`Statistical Organization` + df$Condition)
summary(model_production2)
model_comprehension2 <- aov(df$Correct_Trigram_Scores ~ df$`Statistical Organization` + df$Condition)
summary(model_comprehension2)
#MC: regressions for comprehension and production as predicted by experience.
#MC: still need to combine data frames to be absolutely sure of what's going on here. Check out cbind.
model_experience_comprehension <- lm(df$Experience_Total ~ df2$Experience_Total)
#MC: regressions for comprehension and production as predicted by experience.
#MC: still need to combine data frames to be absolutely sure of what's going on here. Check out cbind.
model_experience_comprehension <- lm(df$Correct_Trigram_Scores ~ df2$Experience_Total)
summary(model_experience_comprehension)
model_experience_production <- lm(df$Correct_Mvt_Scores ~ df2$Experience_Total)
summary(model_experience_production)
?cbind
?rbind
myfile <- "~/Documents/Most/-SLA_Study/GitHub/ActionLearning/Data/SLA Official Data/Concatenated Data/Data + Experience All.csv"
file2 <- "~/Documents/Most/-SLA_Study/GitHub/ActionLearning/Data/SLA Official Data/Concatenated Data/Data + Experience All.csv"
df2 <- read_csv(file2)
View(df2)
str(df2)
df2<-df2[!(df2$Finished=="0"),]
num.columns <- c('T-1_Likert', 'T-2_Likert', 'T-3_Likert', 'T-4_Likert', 'UT-1_Likert', 'UT-2_Likert', 'UT-3_Likert', 'UT-4_Likert')
num.columns <- c('T-1_Recognition', 'T-2_Recognition', 'T-3_Recognition', 'T-4_Recognition', 'UT-1_Recognition', 'UT-2_Recognition', 'UT-3_Recognition', 'UT-4_Recognition')
num.columns <- c('T-1c_Likert', 'T-2c_Likert', 'T-3c_Likert', 'T-4c_Likert', 'Correct_Mvt_T-1', 'Correct_Mvt_T-2', 'Correct_Mvt_T-3', 'Correct_Mvt_T-4')
df[num.columns] <- sapply(df[num.columns], as.numeric)
df$Finished <- as.factor(df$Finished)
df$`Statistical Organization` <- as.factor(df$`Statistical Organization`)
df$Condition <- as.factor(df$Condition)
str(df2)
df$Finished <- as.factor(df$Finished)
str(df2)
num.columns <- c('T-1_Likert', 'T-2_Likert', 'T-3_Likert', 'T-4_Likert', 'UT-1_Likert', 'UT-2_Likert', 'UT-3_Likert', 'UT-4_Likert')
num.columns <- c('T-1_Recognition', 'T-2_Recognition', 'T-3_Recognition', 'T-4_Recognition', 'UT-1_Recognition', 'UT-2_Recognition', 'UT-3_Recognition', 'UT-4_Recognition')
num.columns <- c('T-1c_Likert', 'T-2c_Likert', 'T-3c_Likert', 'T-4c_Likert', 'Correct_Mvt_T-1', 'Correct_Mvt_T-2', 'Correct_Mvt_T-3', 'Correct_Mvt_T-4')
df[num.columns] <- sapply(df[num.columns], as.numeric)
df2$Finished <- as.factor(df2$Finished)
df2$`Statistical Organization` <- as.factor(df2$`Statistical Organization`)
df2$Condition <- as.factor(df2$Condition)
str(df2)
#MC: regressions for comprehension and production as predicted by experience.
#MC: still need to combine data frames to be absolutely sure of what's going on here. Check out cbind.
model_experience_comprehension <- lm(df2$Correct_Trigram_Scores ~ df2$Experience_Total)
summary(model_experience_comprehension)
model_experience_production <- lm(df2$Correct_Mvt_Scores ~ df2$Experience_Total)
summary(model_experience_production)
experience_comprehension <- ggplot(df2, aes(df2$Experience_Total, df$Correct_Trigram_Scores))
experience_comprehension + stat_summary(function = x, geom = "point")
experience_comprehension + stat_summary(geom = "point")
experience_production <- ggplot(df2, aes(df2$Experience_Total, df$Correct_Mvt_Scores))
experience_production + stat_summary(geom = "point")
experience_comprehension + stat_summary(function = x, geom = "point")
#MC: scatterplot for comprehension and experience
experience_comprehension <- ggplot(df2, aes(df2$Experience_Total, df$Correct_Trigram_Scores))
experience_comprehension + stat_summary(geom = "point")
install.packages(emmeans)
install.packages('emmeans')
install.packages('magrittr')
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
