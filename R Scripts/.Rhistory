myfile <- "https://raw.githubusercontent.com/emurrug/ActionLearning/master/Data/Pilot%20Data%20All.csv"
df <- read_csv(myfile)
library (readr)   #reading CSV's
library (kableExtra)   #formatting table
library (pastecs) #describes data
library (dplyr)   #manipulating data to view it
library (ggplot2) #visualizing data with graphs (we don't talk about the first "ggplot")
myfile <- "https://raw.githubusercontent.com/emurrug/ActionLearning/master/Data/Pilot%20Data%20All.csv"
df <- read_csv(myfile)
df
#or to view the whole table at once
View(df)
df <- df[! (df$ResponseId == "Response ID")
]
df <- df[! (df$ResponseId == "Response ID")]
df <- df[-1,]
myfile <- "https://raw.githubusercontent.com/emurrug/ActionLearning/master/Data/Pilot%20Data%20All.csv"
df <- read_csv(myfile)
df <- df[-1,]
myfile <- "https://raw.githubusercontent.com/emurrug/ActionLearning/master/Data/Pilot%20Data%20All.csv"
df <- read_csv(myfile)
df <- df[-1,]
ggplot(df, aes(x = df$T-1_Recognition)) +  geom_histogram(binwidth = 1, color = "black", fill = "white")
ggplot(df, aes(x = T-1_Recognition)) +  geom_histogram(binwidth = 1, color = "black", fill = "white")
ggplot(df, aes(x = `T-1_Recognition`)) +  geom_histogram(binwidth = 1, color = "black", fill = "white")
is.factor(df$`T-1_Recognition`)
as.factor(df$`T-1_Recognition`)
ggplot(df, aes(x = `T-1_Recognition`)) +  geom_histogram(binwidth = 1, color = "black", fill = "white")
ggplot(df, aes(x = `T-1_Recognition`)) +  geom_bar(binwidth = 1, color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = `T-1_Recognition`)) +  geom_bar(color = "black", fill = "white", stat = "count")
str(df)
ggplot(df, aes(x = `T-1_Likert_1`)) +  geom_bar(color = "black", fill = "white", stat = "count")
?geom_bar
myfile <- "https://raw.githubusercontent.com/emurrug/ActionLearning/master/Data/Pilot%20Data%20All.csv"
df <- read_csv(myfile, na.rm = TRUE)
df <- df[-1,]
?read_csv
ggplot(df, aes(x = df$variable, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = `T-1_Likert_1`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = `T-1_Likert_1`)) +  geom_bar(color = "black", fill = "cyan", stat = "count")
ggplot(df, aes(x = `T-1_Likert_1`)) +  geom_bar(color = "yellow", fill = "cyan", stat = "count")
ggplot(df, aes(x = `T-1_Likert_1`)) +  geom_bar(color = "black", fill = "grey", stat = "count")
ggplot(df, aes(x = `T-1_Likert_1`)) +  geom_bar(color = "black", fill = "skyblue3", stat = "count")
ggplot(df, aes(x = `T-1_Likert_1`)) +  geom_bar(color = "black", fill = "skyblue1", stat = "count")
library (readr)   #reading CSV's
library (kableExtra)   #formatting table
library (pastecs) #describes data
library (dplyr)   #manipulating data to view it
library (ggplot2) #visualizing data with graphs (we don't talk about the first "ggplot")
df <- df %>% mutate_if(is.character,as.factor)
#EM: if you want to take the likert scales and make these numeric (so you can get an average, for example)
#you can select specific columns and make only these numeric
num.columns <- c('T-1_Likert_1', 'T-2_Likert_1', 'T-3_Likert_1', 'T-4_Likert_1')
df[num.columns] <- sapply(df[num.columns], as.numeric)
#always double check it looks good:
str(df)
df <- df %>%
mutate(MeanRecognition = mean(c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`)))
#Another way to visualize the exact same function is a simple "averaging equation":
df$MeanRecognition <- ((df$`T-1_Likert_1` + df$`T-2_Likert_1` + df$`T-3_Likert_1` + df$`T-4_Likert_1`)/4)
stat.desc(df$variable)
stat.desc(df`T-1_Likert_1`)
#You can also import the file directly from your computer. To do this, you just put your path
#directory instead of a URL.
df <- read_csv(myfile)
df <- df[-1,] #EM: removes the first row of the data (since this is a Qualtrics file w/ two headers)
#to view your first few lines you do
head(df)
#or to view the whole table at once
View(df)
df <- na.omit(df) #EM: removes rows with NAs in them.
#or to view the whole table at once
View(df)
str(df)
#to look at individual variables you can type in something like
is.factor(df$variable) #OR
is.factor(df$`T-1_Likert_1`)
is.numeric(df$`T-1_Likert_1`)
df <- df %>% mutate_if(is.character,as.factor)
is.numeric(df$`T-1_Likert_1`)
is.factor(df$`T-1_Likert_1`)
#EM: if you want to take the likert scales and make these numeric (so you can get an average, for example)
#you can select specific columns and make only these numeric
num.columns <- c('T-1_Likert_1', 'T-2_Likert_1', 'T-3_Likert_1', 'T-4_Likert_1')
df[num.columns] <- sapply(df[num.columns], as.numeric)
is.numeric(df$`T-1_Likert_1`)
#always double check it looks good:
str(df)
#EM: if you want to take the likert scales and make these numeric (so you can get an average, for example)
#you can select specific columns and make only these numeric
num.columns <- c('T-1_Likert_1', 'T-2_Likert_1', 'T-3_Likert_1', 'T-4_Likert_1',
'UT-1_Likert_1', 'UT-2_Likert_1', 'UT-3_Likert_1', 'UT-4_Likert_1')
str(df)
#EM: if you want to take the likert scales and make these numeric (so you can get an average, for example)
#you can select specific columns and make only these numeric
num.columns <- c('T-1_Likert_1', 'T-2_Likert_1', 'T-3_Likert_1', 'T-4_Likert_1', 'UT-1_Likert_1', 'UT-2_Likert_1', 'UT-3_Likert_1', 'UT-4_Likert_1')
str(df)
df <- df %>% mutate_if(is.character,as.factor)
#EM: if you want to take the likert scales and make these numeric (so you can get an average, for example)
#you can select specific columns and make only these numeric
num.columns <- c('T-1_Likert_1', 'T-2_Likert_1', 'T-3_Likert_1', 'T-4_Likert_1', 'UT-1_Likert_1', 'UT-2_Likert_1', 'UT-3_Likert_1', 'UT-4_Likert_1')
df[num.columns] <- sapply(df[num.columns], as.numeric)
#always double check it looks good:
str(df)
df <- df %>%
mutate(MeanRecognition = mean(c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`)))
df <- df %>%
mutate(MeanRecognition = mean(c(`UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`)))
df <- df %>%
mutate(MeanRecognition = mean(c(`UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`)))
df <- df %>%
mutate(MeanRecognition = mean(c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`)))
df <- df %>%
mutate(MeanRecognition = mean(c(`UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`)))
df <- df %>%
mutate(MeanRecognition = mean(c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`)))
#Another way to visualize the exact same function is a simple "averaging equation":
df$MeanRecognition <- ((df$`T-1_Likert_1` + df$`T-2_Likert_1` + df$`T-3_Likert_1` + df$`T-4_Likert_1`)/4)
df <- df %>%
mutate(MeanRecognitionT = mean(c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`)))
df <- df %>%
mutate(MeanRecognitionUT = mean(c(`UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`)))
#Another way to visualize the exact same function is a simple "averaging equation":
df$MeanRecognitionT <- ((df$`T-1_Likert_1` + df$`T-2_Likert_1` + df$`T-3_Likert_1` + df$`T-4_Likert_1`)/4)
df$MeanRecognitionUT <- ((df$`T-1_Likert_1` + df$`T-2_Likert_1` + df$`T-3_Likert_1` + df$`T-4_Likert_1`)/4)
df$MeanRecognitionUT <- ((df$`UT-1_Likert_1` + df$`UT-2_Likert_1` + df$`UT-3_Likert_1` + df$`UT-4_Likert_1`)/4)
stat.desc(df$`T-1_Likert_1`)
stat.desc(df$`T-2_Likert_1`)
stat.desc(df$`T-3_Likert_1`)
stat.desc(df$`T-4_Likert_1`)
stat.desc(df$`UT-1_Likert_1`)
stat.desc(df$`UT-2_Likert_1`)
stat.desc(df$`UT-3_Likert_1`)
stat.desc(df$`UT-4_Likert_1`)
ggplot(df, aes(x = df$`MeanRecognitionT`, na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count")
?ggplot
ggplot(df, aes(x = df$`MeanRecognitionT`, na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count", size = 7)
ggplot(df, aes(x = df$`MeanRecognitionT`, na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count", size = 3)
ggplot(df, aes(x = df$`MeanRecognitionT`, na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count", width = 1)
ggplot(df, aes(x = df$`MeanRecognitionT`, na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count", width = .5)
geom_bar(color = "black", fill = "white", stat = "count", size = 3)
geom_bar(color = "black", fill = "white", stat = "count", size = 7)
ggplot(df, aes(x = df$`MeanRecognitionUT`, na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count", width = .5)
library (readr)   #reading CSV's
library (kableExtra)   #formatting table
library (pastecs) #describes data
library (dplyr)   #manipulating data to view it
library (ggplot2) #visualizing data with graphs (we don't talk about the first "ggplot")
ggplot(df, aes(x = df$'MeanRecognitionT', na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = df$'MeanRecognitionT', na.rm = TRUE)) +
geom_histogram(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = df'MeanRecognitionT', na.rm = TRUE)) +
geom_histogram(color = "black", fill = "white", stat = "count", binwidth = 1)
ggplot(df, aes(x = df'MeanRecognitionT', na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = df$'MeanRecognitionT', na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = df$'MeanRecognitionUT', na.rm = TRUE)) +
geom_bar(color = "black", fill = "white", stat = "count")
library (readr)   #reading CSV's
library (kableExtra)   #formatting table
library (pastecs) #describes data
library (dplyr)   #manipulating data to view it
library (ggplot2) #visualizing data with graphs (we don't talk about the first "ggplot")
#Statistical learning vs. random stimuli:
#This chunk differentiated between the random (0) and SL (1) stimuli by creating a new column.
df <- df %>%
mutate(Paradigm = recode(condition, c("active - RS-1" = 0, "passive - RS-2" = 0,
"passive - RS-3" = 0, "active - SLS-1" = 1, "active - SLS-2" = 1,
"active - SLS-3" = 1, "passive - SLS-2" = 1)))
?recode
#Statistical learning vs. random stimuli:
#This chunk differentiated between the random (0) and SL (1) stimuli by creating a new column.
df <- df %>%
mutate(Paradigm = recode(condition, "active - RS-1" = 0, "passive - RS-2" = 0,
"passive - RS-3" = 0, "active - SLS-1" = 1, "active - SLS-2" = 1,
"active - SLS-3" = 1, "passive - SLS-2" = 1))
#Active vs. passive stimuli:
#This chunk differentiated between the passive (0) and active (1) stimuli by creating a new column.
df <- df %>%
mutate(Condition = recode(df$`condition`, "active - RS-1" = 1, "passive - RS-2" = 0,
"passive - RS-3" = 0, "active - SLS-1" = 1, "active - SLS-2" = 1,
"active - SLS-3" = 1, "passive - SLS-2" = 0))
#This chunk created composite scores for random vs. SL Likert scores by first grouping the data by
#Paradigm (0=random, 1=SL), then finding the mean of all MeanRecognitionT scores, then all
#MeanRecognitionUT scores, still separated by random vs. SL. The output is a 4x4 tibble.
#The lowercase "p" in the variable names distinguishes between the means for Paradigm vs. Condition.
df %>%
group_by(Paradigm) %>%
summarise("MeanTp" = mean(MeanRecognitionT), "MeanUTp" = mean(MeanRecognitionUT))
df %>%
group_by(Condition) %>%
summarise("MeanTc" = mean(MeanRecognitionT), "MeanUTc" = mean(MeanRecognitionUT))
df <- df %>%
rowwise() %>%
mutate (MeanRecognitionT = mean(c(`T-1_Likert_1`, df$`T-2_Likert_1`, df$`T-3_Likert_1`, df$`T-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate (MeanRecognitionUT = mean(c(`UT-1_Likert_1`, df$`UT-2_Likert_1`, df$`UT-3_Likert_1`, df$`UT-4_Likert_1`)))
df <- df %>%
mutate(MeanRecognitionT = mean(c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate (MeanRecognitionT = mean(c(`T-1_Likert_1`, df$`T-2_Likert_1`, df$`T-3_Likert_1`, df$`T-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate (MeanRecognitionUT = mean(c(`UT-1_Likert_1`, df$`UT-2_Likert_1`, df$`UT-3_Likert_1`, df$`UT-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate (MeanRecognitionT = mean(c(df$`T-1_Likert_1`, df$`T-2_Likert_1`, df$`T-3_Likert_1`, df$`T-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate (MeanRecognitionUT = mean(c(df$`UT-1_Likert_1`, df$`UT-2_Likert_1`, df$`UT-3_Likert_1`, df$`UT-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate(MeanRecognitionT = mean(c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate(MeanRecognitionUT = mean(c(`UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`)))
#This chunk created composite scores for random vs. SL Likert scores by first grouping the data by
#Paradigm (0=random, 1=SL), then finding the mean of all MeanRecognitionT scores, then all
#MeanRecognitionUT scores, still separated by random vs. SL. The output is a 4x4 tibble.
#The lowercase "p" in the variable names distinguishes between the means for Paradigm vs. Condition.
df %>%
group_by(Paradigm) %>%
summarise("MeanTp" = mean(MeanRecognitionT), "MeanUTp" = mean(MeanRecognitionUT))
#This chunk created composite scores for active vs. passive Likert scores by first grouping the
#data by Condition (0=passive, 1=active), then finding the mean of all MeanRecognitionT scores,
#then all MeanRecognitionUT scores, still separated by active vs. passive. The output is a 4x4 tibble.
#The lowercase "c" in the variable names distinguishes between the means for Paradigm vs. Condition.
df %>%
group_by(Condition) %>%
summarise("MeanTc" = mean(MeanRecognitionT), "MeanUTc" = mean(MeanRecognitionUT))
ggplot(df, aes(x = MeanTp, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
#Were some people more confident than others? To find out, I've created a new column (MeanRecognition)
#that averages MeanRecognitionT and MeanRecognitionUT to get an overall score per subject.
df <- df %>%
rowwise() %>%
mutate(MeanRecognition = mean(c(`MeanRecognitionT`, `MeanRecognitionUT`)))
#To visualize the distribution of confidence, I'll plot MeanRecognition on a histogram.
ggplot(df, aes(x = df$MeanRecognition, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
#To visualize the distribution of confidence, I'll plot MeanRecognition on a histogram.
ggplot(df, aes(x = `MeanRecognition`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
?geom_bar
?ggplot
#To visualize the distribution of confidence, I'll plot MeanRecognition on a histogram.
ggplot(df, aes(x = `MeanRecognition`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count", size = 3)
#To visualize the distribution of confidence, I'll plot MeanRecognition on a histogram.
ggplot(df, aes(x = `MeanRecognition`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count", width = 1)
#To visualize the distribution of confidence, I'll plot MeanRecognition on a histogram.
ggplot(df, aes(x = `MeanRecognition`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count", bin = 1)
?dotplot
?dotchart
dotchart(df, labels = `ResponseID`, groups = `T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`, `UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`)
dotchart(df, labels = `ResponseID`, groups = `T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`, `UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`, cex = 0.5)
dotchart(df(ResonseID), labels = `T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`, `UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`, cex = 0.5)
dotchart(df$ResonseID, labels = `T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`, `UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`, cex = 0.5)
dotchart(df, labels = c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`, `UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`, cex = 0.5), groups = ResonseID)
str(df)
#EM: if you want to take the likert scales and make these numeric (so you can get an average, for example)
#you can select specific columns and make only these numeric
num.columns <- c('T-1_Likert_1', 'T-2_Likert_1', 'T-3_Likert_1', 'T-4_Likert_1', 'UT-1_Likert_1', 'UT-2_Likert_1', 'UT-3_Likert_1', 'UT-4_Likert_1')
num.columns <- c('T-1_Recognition', 'T-2_Recognition', 'T-3_Recognition', 'T-4_Recognition', 'UT-1_Recognition', 'UT-2_Recognition', 'UT-3_Recognition', 'UT-4_Recognition')
num.columns <- c('T-1c_Likert_1', 'T-2c_Likert_1', 'T-3c_Likert_1', 'T-4c_Likert_1', 'Correct_Mvt_T-1', 'Correct_Mvt_T-2', 'Correct_Mvt_T-3', 'Correct_Mvt_T-4')
str(df)
df[num.columns] <- sapply(df[num.columns], as.numeric)
str(df)
df <- df %>% mutate_if(is.character,as.factor)
#EM: if you want to take the likert scales and make these numeric (so you can get an average, for example)
#you can select specific columns and make only these numeric
num.columns <- c('T-1_Likert_1', 'T-2_Likert_1', 'T-3_Likert_1', 'T-4_Likert_1', 'UT-1_Likert_1', 'UT-2_Likert_1', 'UT-3_Likert_1', 'UT-4_Likert_1')
num.columns <- c('T-1_Recognition', 'T-2_Recognition', 'T-3_Recognition', 'T-4_Recognition', 'UT-1_Recognition', 'UT-2_Recognition', 'UT-3_Recognition', 'UT-4_Recognition')
num.columns <- c('T-1c_Likert_1', 'T-2c_Likert_1', 'T-3c_Likert_1', 'T-4c_Likert_1', 'Correct_Mvt_T-1', 'Correct_Mvt_T-2', 'Correct_Mvt_T-3', 'Correct_Mvt_T-4')
df[num.columns] <- sapply(df[num.columns], as.numeric)
#always double check it looks good:
str(df)
dotchart(df, labels = c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`, `UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`, cex = 0.5), groups = ResonseID)
df$`T-1_Recognition` <- as.numeric(df$`T-1_Recognition`)
#always double check it looks good:
str(df)
df$`T-2_Recognition` <- as.numeric(df$`T-2_Recognition`)
df$`T-3_Recognition` <- as.numeric(df$`T-3_Recognition`)
df$`T-4_Recognition` <- as.numeric(df$`T-4_Recognition`)
df$`UT-4_Recognition` <- as.numeric(df$`UT-4_Recognition`)
df$`UT-3_Recognition` <- as.numeric(df$`UT-3_Recognition`)
df$`UT-2_Recognition` <- as.numeric(df$`UT-2_Recognition`)
df$`UT-1_Recognition` <- as.numeric(df$`UT-1_Recognition`)
#always double check it looks good:
str(df)
df <- df %>%
rowwise() %>%
mutate(MeanLikertT = mean(c(`T-1_Likert_1`, `T-2_Likert_1`, `T-3_Likert_1`,`T-4_Likert_1`)))
df <- df %>%
rowwise() %>%
mutate(MeanLikertUT = mean(c(`UT-1_Likert_1`, `UT-2_Likert_1`, `UT-3_Likert_1`,`UT-4_Likert_1`)))
#This chunk created composite scores for random vs. SL Likert scores by first grouping the data by
#Paradigm (0=random, 1=SL), then finding the mean of all MeanLikertT scores, then all
#MeanLikertUT scores, still separated by random vs. SL. The output is a 4x4 tibble.
#The lowercase "p" in the variable names distinguishes between the means for Paradigm vs. Condition.
df %>%
group_by(Paradigm) %>%
summarise("MeanTp" = mean(MeanLikertT), "MeanUTp" = mean(MeanLikertUT))
#This chunk created composite scores for active vs. passive Likert scores by first grouping the
#data by Condition (0=passive, 1=active), then finding the mean of all MeanLikertT scores,
#then all MeanLikertUT scores, still separated by active vs. passive. The output is a 4x4 tibble.
#The lowercase "c" in the variable names distinguishes between the means for Paradigm vs. Condition.
df %>%
group_by(Condition) %>%
summarise("MeanTc" = mean(MeanLikertT), "MeanUTc" = mean(MeanLikertUT))
#Do some people always pick the same answer? The analysis above mostly answers that question, I just
#have to calculate means for not only Likerts, but Recognition questions, too.
df <- df %>%
rowwise() %>%
mutate(MeanRecognitionT = mean(c('T-1_Recognition', 'T-2_Recognition', 'T-3_Recognition', 'T-4_Recognition')))
warnings()
str(df)
#Do some people always pick the same answer? The analysis above mostly answers that question, I just
#have to calculate means for not only Likerts, but Recognition questions, too.
df <- df %>%
rowwise() %>%
mutate(MeanRecognitionT = mean(c(`T-1_Recognition`, `T-2_Recognition`, `T-3_Recognition`, `T-4_Recognition`)))
df <- df %>%
rowwise() %>%
mutate(MeanRecognitionUT = mean(c(`UT-1_Recognition`, `UT-2_Recognition`, `UT-3_Recognition`, `UT-4_Recognition`)))
ggplot(df, aes(x = MeanRecognitionT, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = MeanRecognitionUT, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = MeanLikertT, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = MeanLikertUT, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
?subtract
if(`T-1_Recognition` = 1){
x = 1
}
if(`T-1_Recognition` = 1){x = 1}
if(`T-1_Recognition` = '1'){x = 1}
if(`T-1_Recognition` == 1){x = 1}
if('T-1_Recognition' == 1){x = 1}
if('T-1_Recognition' == 2){x = 0}
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = x)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` == x)
if('T-1_Recognition' = 1){x = 1}
if('T-1_Recognition' = 2){x = 0}
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` == x)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = x)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = (c(1, 0)[`T-1_Recognition` %in% c(1)]))
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = ifelse(`T-1_Recognition` %in% c(1)) == 1)
rlang::last_error()
?ifelse
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = ifelse(`T-1_Recognition` %in% c(1)) == yes)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = ifelse(`T-1_Recognition` %in% c(1)) = 1)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = if(`T-1_Recognition` %in% c(1)) = 1)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = if(`T-1_Recognition` %in% c(1)) == 1)
mutate(`T-1_Correct` = c(`T-1_Recognition` = 1)
df <- df %>%
rowwise() %>%
mutate(`T-1_Correct` = c(`T-1_Recognition` = 1))
#Were some people more confident than others? To find out, I've created a new column (MeanRecognition)
#that averages MeanLikertT and MeanLikertUT to get an overall score per subject.
df <- df %>%
rowwise() %>%
mutate(MeanLikert = mean(c(`MeanLikertT`, `MeanLikertUT`)))
library (readr)   #reading CSV's
library (kableExtra)   #formatting table
library (pastecs) #describes data
library (dplyr)   #manipulating data to view it
library (ggplot2) #visualizing data with graphs (we don't talk about the first "ggplot")
#Were some people more confident than others? To find out, I've created a new column (MeanLikert)
#that averages MeanLikertT and MeanLikertUT to get an overall score per subject.
df <- df %>%
rowwise() %>%
mutate(MeanLikert = mean(c(`MeanLikertT`, `MeanLikertUT`)))
#To visualize the distribution of confidence, I'll plot MeanRecognition on a histogram.
ggplot(df, aes(x = `MeanLikert`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
df <- df %>%
rowwise() %>%
mutate(MeanRecognition = mean(c(`MeanRecognitioT`, `MeanRecognitionUT`)))
df <- df %>%
rowwise() %>%
mutate(MeanRecognition = mean(c(`MeanRecognitionT`, `MeanRecognitionUT`)))
#To visualize the distribution of recognition, I'll plot MeanRecognitionT and MeanRecognitionUT.
ggplot(df, aes(x = `MeanRecognitionT`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
ggplot(df, aes(x = `MeanRecognitionUT`, na.rm = TRUE)) + geom_bar(color = "black", fill = "white", stat = "count")
